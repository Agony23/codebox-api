{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udce6 CodeBox API","text":"<p>CodeBox is the simplest cloud infrastructure for running and testing python code in an isolated environment. It allows developers to execute arbitrary python code without worrying about security or dependencies. Some key features include:</p> <ul> <li>Securely execute python code in a sandboxed container</li> <li>Easily install python packages into the environment</li> <li>Built-in file storage for uploading and downloading files</li> <li>Support for running code asynchronously using asyncio</li> <li>Local testing mode for development without an internet connection</li> </ul>"},{"location":"#why-is-sandboxing-important","title":"Why is SandBoxing important?","text":"<p>When deploying LLM Agents to production, it is important to ensure that the code they run is safe and does not contain any malicious code. This is especially important when considering prompt injection, which could give an attacker access to the entire system.</p>"},{"location":"#how-does-codebox-work","title":"How does CodeBox work?","text":"<p>CodeBox uses a cloud hosted system to run hardened containers that are designed to be secure. These containers are then used to run the code that is sent to the API. This ensures that the code is run in a secure environment, and that the code cannot access the host system.</p>"},{"location":"#links-resources","title":"Links &amp; Resources","text":"<ul> <li>CodeInterpreterAPI</li> <li>Documentation</li> <li>REST API</li> <li>Get API Key</li> <li>Github Repo</li> <li>PyPI Package</li> </ul>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#concepts-overview","title":"Concepts Overview","text":"name description BaseBox Abstract base class for isolated code execution environments LocalBox Local implementation of BaseBox for testing CodeBox Remote API wrapper for executing code on CodeBox cloud service CodeBoxSettings Configuration settings for the API client CodeBoxError Custom exception class for API errors"},{"location":"concepts/#basebox","title":"BaseBox","text":"<p>The BaseBox class is an abstract base class that defines the interface for isolated code execution environments, also called CodeBoxes. It contains abstract methods like <code>run</code>, <code>upload</code>, <code>download</code> etc. that all concrete CodeBox implementations need to implement. The BaseBox handles session management and enforces the core interface.</p> <p>BaseBox aims to provide a common interface to interact with any code execution sandbox. It is designed to be extended by subclasses for specific implementations like LocalBox or CodeBox.</p>"},{"location":"concepts/#localbox","title":"LocalBox","text":"<p>LocalBox is a concrete implementation of BaseBox that runs code locally using a Jupyter kernel. It is intended for testing and development purposes.</p> <p>The key aspects are:</p> <ul> <li>Spins up a local Jupyter kernel gateway to execute code</li> <li>Implements all BaseBox methods like <code>run</code>, <code>upload</code> etc locally</li> <li>Provides a sandboxed local environment without needing access to CodeBox cloud</li> <li>Useful for testing code before deploying to CodeBox cloud</li> </ul> <p>LocalBox is the default CodeBox used when no API key is specified. It provides a seamless way to develop locally and then switch to the cloud.</p>"},{"location":"concepts/#codebox","title":"CodeBox","text":"<p>CodeBox is the main class that provides access to the remote CodeBox cloud service. It handles:</p> <ul> <li>Authentication using the API key</li> <li>Making requests to the CodeBox API</li> <li>Parsing responses and converting to common schema</li> <li>Providing both sync and async access</li> </ul> <p>It extends BaseBox and implements all the core methods to execute code on the remote servers.</p> <p>The key methods are:</p> <ul> <li><code>start() / astart()</code> - Starts a new CodeBox instance</li> <li><code>stop() / astop()</code> - Stops and destroys a CodeBox instance</li> <li><code>run() / arun()</code> - Executes python code in the CodeBox</li> <li><code>upload() / aupload()</code> - Uploads a file into the CodeBox</li> <li><code>download() / adownload()</code> - Downloads a file from the CodeBox</li> <li><code>list_files() / alist_files()</code> - Lists all files in the CodeBox</li> <li><code>install() / ainstall()</code> - Installs a PyPI package into the CodeBox</li> <li><code>restart() / arestart()</code> - Restarts the Python kernel. This can be useful to clear state between executions.</li> </ul> <p>The CodeBox class provides a simple way to leverage the remote cloud infrastructure with minimal code changes.</p>"},{"location":"concepts/#codeboxsettings","title":"CodeBoxSettings","text":"<p>This contains the client configuration like:</p> <ul> <li>API key for authentication</li> <li>Base URL for the API</li> <li>Timeout values</li> <li>Debug settings</li> </ul> <p>It loads values from environment variables and provides an easy way to configure the client.</p>"},{"location":"concepts/#codeboxerror","title":"CodeBoxError","text":"<p>Custom exception class raised when there is an error response from the API. It includes additional context like:</p> <ul> <li>HTTP status code</li> <li>Response JSON body</li> <li>Response headers</li> </ul> <p>This provides an easy way to handle errors with additional context.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>Run code in a new CodeBox:</p> <pre><code>from codeboxapi import CodeBox\n\nwith CodeBox() as codebox:\n  print(codebox.status())\n\n  codebox.run(\"print('Hello World!')\")\n</code></pre> <p>Run async code:</p> <pre><code>import asyncio\nfrom codeboxapi import CodeBox\n\nasync def main():\n  async with CodeBox() as codebox:\n    await codebox.astatus()\n    await codebox.arun(\"print('Hello World!')\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"examples/#file-io","title":"File IO","text":"<p>Upload and download files:</p> <pre><code>from codeboxapi import CodeBox\n\nwith CodeBox() as codebox:\n\n  # Upload file\n  codebox.upload(\"data.csv\", b\"1,2,3\\\n4,5,6\")\n\n  # List files\n  print(codebox.list_files())\n\n  # Download file\n  data = codebox.download(\"data.csv\")\n  print(data.content)\n</code></pre>"},{"location":"examples/#package-installation","title":"Package Installation","text":"<p>Install packages into the CodeBox:</p> <pre><code>from codeboxapi import CodeBox\n\nwith CodeBox() as codebox:\n\n  # Install packages\n  codebox.install(\"pandas\")\n  codebox.install(\"matplotlib\")\n\n  # Use them\n  codebox.run(\"import pandas as pd\")\n  codebox.run(\"import matplotlib.pyplot as plt\")\n</code></pre>"},{"location":"examples/#restoring-sessions","title":"Restoring Sessions","text":"<p>Restore a CodeBox session from its ID:</p> <pre><code>from codeboxapi import CodeBox\n\n# Start CodeBox and save ID\ncodebox = CodeBox()\ncodebox.start()\nsession_id = codebox.session_id\n\n#delete session\ndel session\n\n# Restore session\ncodebox = CodeBox.from_id(session_id)\nprint(codebox.status())\n</code></pre>"},{"location":"examples/#parallel-execution","title":"Parallel Execution","text":"<p>Run multiple CodeBoxes in parallel:</p> <pre><code>import asyncio\nfrom codeboxapi import CodeBox\n\nasync def main():\n    await asyncio.gather(\n        spawn_codebox() for _ in range(10)\n    )\n\nasync def spawn_codebox():\n    async with CodeBox() as codebox:\n        print(await codebox.arun(\"print('Hello World!')\"))\n\nasyncio.run(main())\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>CodeBox can be installed via pip:</p> <pre><code>pip install codeboxapi\n</code></pre> <p>This will install the <code>codeboxapi</code> package and all dependencies.</p> <p>For local development without an API key, you will also need to install <code>jupyter-kernel-gateway</code>:</p> <pre><code>pip install \"codeboxapi[all]\"\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use CodeBox, you first need to obtain an API key from the CodeBox website.</p> <p>You can then start a CodeBox session:</p> <pre><code>from codeboxapi import CodeBox\n\nwith CodeBox() as codebox:\n  codebox.run(\"a = 'Hello World!'\")\n  codebox.run(\"print(a)\")\n</code></pre> <p>The context manager (<code>with * as *:</code>) will automatically start and shutdown the CodeBox.</p> <p>You can also use CodeBox asynchronously:</p> <pre><code>import asyncio\nfrom codeboxapi import CodeBox\n\nasync def main():\n  async with CodeBox() as codebox:\n    await codebox.astatus()\n    await codebox.arun(\"print('Hello World!')\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"usage/#codebox-api-key","title":"CodeBox API Key","text":"<p>If you want to use remote code execution, you will need to obtain an API Key. This is nessesary for deployment when you care about security of your backend system and you want to serve multiple users in parallel. The CodeBox API Cloud service provides auto scaled infrastructure to run your code in a secure sandboxed environment.</p>"},{"location":"usage/#localbox","title":"LocalBox","text":"<p>If you just want to experiment local with this you dont need an api key and by not inserting one the system will automatically use a LocalBox in the background when you call the CodeBox() class.</p>"}]}